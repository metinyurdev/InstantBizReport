import streamlit as st
import requests
import pandas as pd
import plotly.express as px
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# API URL'si
API_URL = "http://localhost"  # Backend'inizin Ã§alÄ±ÅŸtÄ±ÄŸÄ± URL'i buraya yazÄ±n

# Ã–zel CSS ekleme
def inject_custom_css():
    st.markdown(
        """
        <style>
        .stButton>button {
            background-color: #4CAF50;
            color: white;
            font-size: 16px;
            padding: 10px 24px;
            border-radius: 8px;
            border: none;
            transition: background-color 0.3s ease;
        }
        .stButton>button:hover {
            background-color: #45a049;
        }
        .stTitle {
            color: #4CAF50;
        }
        .stHeader {
            color: #4CAF50;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

# Arial yazÄ± tipini kaydet (Windows'ta genellikle bu yol kullanÄ±lÄ±r)
pdfmetrics.registerFont(TTFont('Arial', 'C:/Windows/Fonts/arial.ttf'))

# DataFrame'i PDF olarak kaydetme fonksiyonu
def save_dataframe_as_pdf(df, filename):
    pdf = SimpleDocTemplate(filename, pagesize=letter)
    styles = getSampleStyleSheet()
    elements = []

    # BaÅŸlÄ±k ekleme (Arial yazÄ± tipi kullan)
    title_style = styles['Title']
    title_style.fontName = 'Arial'  # Arial yazÄ± tipi
    title = Paragraph("Personals Data", title_style)
    elements.append(title)

    # DataFrame'i tablo olarak ekleme
    table_data = [df.columns.to_list()] + df.values.tolist()
    table = Table(table_data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Arial'),  # BaÅŸlÄ±k iÃ§in Arial
        ('FONTNAME', (0, 1), (-1, -1), 'Arial'),  # Veriler iÃ§in Arial
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ]))
    elements.append(table)

    # PDF'i oluÅŸturma
    pdf.build(elements)

# Personals sayfasÄ±
def show_personals():
    inject_custom_css()  # Ã–zel CSS ekle
    st.title("Personals Page")
    st.write("You can see personals data in different ways.")

    # Personals verilerini API'den Ã§ek
    response = requests.get(f"{API_URL}/personals", headers={"Authorization": f"Bearer {st.session_state.token}"})
    if response.status_code == 200:
        personals_data = response.json().get("personals", [])  # "personals" anahtarÄ±ndaki verileri al
        if isinstance(personals_data, list) and len(personals_data) > 0:
            # Verileri pandas DataFrame'e dÃ¶nÃ¼ÅŸtÃ¼r
            df = pd.DataFrame(personals_data)

            # Tablo GÃ¶sterimi
            st.subheader("Show Table")
            st.table(df)

            # DataFrame GÃ¶sterimi
            st.subheader("Show DataFrame")
            st.dataframe(df)

            # GÃ¶rselleÅŸtirme SeÃ§enekleri
            st.subheader("Visualize Data")
            visualization_option = st.selectbox(
                "Select Visualization Type",
                ["Bar Chart", "Pie Chart"],
            )

            if visualization_option == "Bar Chart":
                if "position" in df.columns:
                    position_counts = df["position"].value_counts().reset_index()
                    position_counts.columns = ["Position", "Count"]
                    fig = px.bar(position_counts, x="Position", y="Count", title="Personal Distribution by Position")
                    st.plotly_chart(fig)
                else:
                    st.warning("Verilerde 'position' sÃ¼tunu bulunamadÄ±.")

            elif visualization_option == "Pie Chart":
                if "position" in df.columns:
                    position_counts = df["position"].value_counts().reset_index()
                    position_counts.columns = ["Position", "Count"]
                    fig = px.pie(position_counts, values="Count", names="Position", title="Personal Distribution by Position")
                    st.plotly_chart(fig)
                else:
                    st.warning("Verilerde 'position' sÃ¼tunu bulunamadÄ±.")

            # PDF Olarak Ä°ndirme Butonu
            if st.button("Download Data as PDF"):
                filename = "personals_data.pdf"
                save_dataframe_as_pdf(df, filename)
                with open(filename, "rb") as file:
                    btn = st.download_button(
                        label="Click to Download",
                        data=file,
                        file_name=filename,
                        mime="application/octet-stream"
                    )
        else:
            st.warning("Personals verisi bulunamadÄ± veya boÅŸ bir liste dÃ¶ndÃ¼.")
    else:
        st.error(f"Personals verileri alÄ±namadÄ±: {response.status_code} - {response.text}")

    # Dashboard'a geri dÃ¶n butonu
    if st.button("ðŸ”™ Back to Dashboard"):
        st.session_state.current_page = "dashboard"
        st.rerun()